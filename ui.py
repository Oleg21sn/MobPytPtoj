import tkinter as tk
from tkinter import messagebox, ttk, simpledialog
from db import get_lessons, load_words, save_word, create_lesson, rename_lesson, toggle_word_learned
from datetime import datetime
import random

class WordTrainerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–í–∏–≤—á–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö —Å–ª—ñ–≤")
        self.root.geometry("500x600")
        self.root.configure(bg="#f0f8ff")
        self.words = {}
        self.current_lesson = None
        self.training_data = []
        self.training_index = 0
        self.training_mode = "EN-UA"
        self.mistake_count = 0
        self.current_word = None
        self.correct_answer = ""
        self.score = 0
        self.attempts_count = 0  
        self.create_main_menu()

        # –ì–∞—Ä—è—á—ñ –∫–ª–∞–≤—ñ—à—ñ
        self.root.bind("<Control-Key-1>", lambda event: self.add_word_ui())
        self.root.bind("<Control-Key-2>", lambda event: self.show_dictionary())
        self.root.bind("<Control-Key-3>", lambda event: self.select_mode())
        self.root.bind("<Control-Key-4>", lambda event: self.show_learned_words())
        self.root.bind("<Escape>", lambda event: self.create_main_menu())

    def clear_window(self):
        for widget in self.root.winfo_children():
            widget.destroy()

    def create_main_menu(self):
        self.clear_window()
        self.root.unbind("<Return>")

        # –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = tk.Frame(self.root, bg="#f0f8ff")
        main_container.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        tk.Label(main_container, text="üìö Word Trainer", 
                font=("Arial", 24, "bold"), bg="#f0f8ff", fg="#2c3e50").pack(pady=20)

        # –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        buttons = [
            ("‚ûï –î–æ–¥–∞—Ç–∏ —Å–ª–æ–≤–æ", "#3498db", self.add_word_ui),
            ("üìñ –°–ª–æ–≤–Ω–∏–∫", "#2ecc71", self.show_dictionary),
            ("üèãÔ∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", "#e67e22", self.select_mode),
            ("üìù –í–∏–≤—á–µ–Ω—ñ —Å–ª–æ–≤–∞", "#f1c40f", self.show_learned_words),
            ("üö™ –í–∏—Ö—ñ–¥", "#e74c3c", self.root.quit)
        ]

        for text, color, command in buttons:
            btn = tk.Button(main_container, text=text,
                          font=("Arial", 14),
                          bg=color,
                          fg="white",
                          relief=tk.FLAT,
                          width=20,
                          command=command)
            btn.pack(pady=10)

            # –•–æ–≤–µ—Ä-–µ—Ñ–µ–∫—Ç
            def on_enter(e, btn=btn, color=color):
                btn['bg'] = self.darken_color(color)
            def on_leave(e, btn=btn, color=color):
                btn['bg'] = color

            btn.bind("<Enter>", on_enter)
            btn.bind("<Leave>", on_leave)

    def darken_color(self, hex_color):
        """–ó–∞—Ç–µ–º–Ω—é—î –∫–æ–ª—ñ—Ä –¥–ª—è —Ö–æ–≤–µ—Ä-–µ—Ñ–µ–∫—Ç—É."""
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ HEX –≤ RGB
        r = int(hex_color[1:3], 16)
        g = int(hex_color[3:5], 16)
        b = int(hex_color[5:7], 16)
        
        # –ó–∞—Ç–µ–º–Ω—é—î–º–æ
        factor = 0.8
        r = int(r * factor)
        g = int(g * factor)
        b = int(b * factor)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –Ω–∞–∑–∞–¥ –≤ HEX
        return f"#{r:02x}{g:02x}{b:02x}"

    def select_mode(self):
        """–í–∏–±—ñ—Ä —Ä–µ–∂–∏–º—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è."""
        self.clear_window()
        
        # –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = tk.Frame(self.root, bg="#f0f8ff")
        main_container.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        tk.Label(main_container, text="üèãÔ∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", 
                font=("Arial", 24, "bold"), bg="#f0f8ff", fg="#2c3e50").pack(pady=20)
                
        # –í–∏–±—ñ—Ä —É—Ä–æ–∫—É
        tk.Label(main_container, text="–û–±–µ—Ä—ñ—Ç—å —É—Ä–æ–∫:", 
                font=("Arial", 14), bg="#f0f8ff", fg="#34495e").pack(pady=(0, 5))
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫—ñ–≤
        lessons = [lesson["name"] for lesson in get_lessons()]
        
        # –Ø–∫—â–æ —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π, —Å—Ç–≤–æ—Ä—é—î–º–æ —É—Ä–æ–∫ "–ì–æ–ª–æ–≤–Ω–∏–π"
        if not lessons:
            print("UI: –°–ø–∏—Å–æ–∫ —É—Ä–æ–∫—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π —É select_mode. –°—Ç–≤–æ—Ä—é—î–º–æ —É—Ä–æ–∫ '–ì–æ–ª–æ–≤–Ω–∏–π'")
            result = create_lesson("–ì–æ–ª–æ–≤–Ω–∏–π")
            print(f"UI: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —É—Ä–æ–∫—É '–ì–æ–ª–æ–≤–Ω–∏–π': {result}")
            
            if result:
                lessons = [lesson["name"] for lesson in get_lessons()]
            else:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —É—Ä–æ–∫! –ú–æ–∂–ª–∏–≤–æ, —î –ø—Ä–æ–±–ª–µ–º–∞ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö.")
                self.create_main_menu()
                return
                
            if not lessons:  # –Ø–∫—â–æ –≤—Å–µ —â–µ –Ω–µ–º–∞—î —É—Ä–æ–∫—ñ–≤, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–º—ñ–Ω–Ω–∏–∫
                lessons = ["–ì–æ–ª–æ–≤–Ω–∏–π"]
            
        self.lesson_var = tk.StringVar(value=lessons[0])
        
        lesson_dropdown = ttk.Combobox(main_container, textvariable=self.lesson_var, 
                                     values=lessons, state="readonly", 
                                     width=30, font=("Arial", 12))
        lesson_dropdown.pack(pady=(0, 20))
        
        # –í–∏–±—ñ—Ä —Ä–µ–∂–∏–º—É
        tk.Label(main_container, text="–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º:", 
                font=("Arial", 14), bg="#f0f8ff", fg="#34495e").pack(pady=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∏ —Ä–µ–∂–∏–º—ñ–≤
        modes = [
            ("üá¨üáß –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞ ‚û°Ô∏è üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "#3498db", "EN-UA"),
            ("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ ‚û°Ô∏è üá¨üáß –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞", "#2ecc71", "UA-EN")
        ]

        for text, color, mode in modes:
            btn = tk.Button(main_container, text=text,
                          font=("Arial", 12),
                          bg=color,
                          fg="white",
                          relief=tk.FLAT,
                          width=30,
                          command=lambda m=mode: self.start_training(m))
            btn.pack(pady=5)

            # –•–æ–≤–µ—Ä-–µ—Ñ–µ–∫—Ç
            def on_enter(e, btn=btn, color=color):
                btn['bg'] = self.darken_color(color)
            def on_leave(e, btn=btn, color=color):
                btn['bg'] = color

            btn.bind("<Enter>", on_enter)
            btn.bind("<Leave>", on_leave)
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        back_btn = tk.Button(main_container, text="üîô –ù–∞–∑–∞–¥",
                           font=("Arial", 12),
                           bg="#e74c3c",
                           fg="white",
                           relief=tk.FLAT,
                           width=15,
                           command=self.create_main_menu)
        back_btn.pack(pady=20)
        
        back_btn.bind("<Enter>", lambda e: back_btn.configure(bg=self.darken_color("#e74c3c")))
        back_btn.bind("<Leave>", lambda e: back_btn.configure(bg="#e74c3c"))

    def start_training(self, mode):
        """–ü–æ—á–∞—Ç–æ–∫ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è."""
        self.training_mode = mode
        self.training_data = []
        self.training_index = 0
        self.mistake_count = 0
        self.score = 0
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–ª–æ–≤–∞ –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
        selected_lesson = self.lesson_var.get()
        words = load_words(selected_lesson)
        
        if not words:
            messagebox.showwarning("–£–≤–∞–≥–∞", f"–ù–µ–º–∞—î —Å–ª—ñ–≤ –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤ —É—Ä–æ—Ü—ñ '{selected_lesson}'!")
            self.create_main_menu()
            return
            
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ —Å–ª—ñ–≤ –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
        for en_word, details in words.items():
            if not details.get("learned", False):  # –¢—Ä–µ–Ω—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–µ–≤–∏–≤—á–µ–Ω—ñ —Å–ª–æ–≤–∞
                self.training_data.append({
                    "english": en_word,
                    "ukrainian": details["translation"],
                    "lesson": details["lesson"]
                })
                
        if not self.training_data:
            messagebox.showinfo("–í—ñ—Ç–∞—î–º–æ!", f"–í–∏ –≤–∏–≤—á–∏–ª–∏ –≤—Å—ñ —Å–ª–æ–≤–∞ –≤ —É—Ä–æ—Ü—ñ '{selected_lesson}'!")
            self.create_main_menu()
            return
            
        # –ü–µ—Ä–µ–º—ñ—à—É—î–º–æ —Å–ª–æ–≤–∞ —É –≤–∏–ø–∞–¥–∫–æ–≤–æ–º—É –ø–æ—Ä—è–¥–∫—É
        random.shuffle(self.training_data)
            
        self.training_ui()

    def training_ui(self):
        """–Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è."""
        self.clear_window()
        
        if self.training_index >= len(self.training_data):
            # –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            accuracy = ((len(self.training_data) - self.mistake_count) / len(self.training_data)) * 100
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            result_window = tk.Toplevel(self.root)
            result_window.title("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è")
            result_window.geometry("400x350")
            result_window.configure(bg="#f0f8ff")
            
            # –¶–µ–Ω—Ç—Ä—É—î–º–æ –≤—ñ–∫–Ω–æ –≤—ñ–¥–Ω–æ—Å–Ω–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
            def center_window(window, parent):
                parent.update_idletasks()
                width = window.winfo_width()
                height = window.winfo_height()
                x = parent.winfo_x() + (parent.winfo_width() - width) // 2
                y = parent.winfo_y() + (parent.winfo_height() - height) // 2
                window.geometry(f"{width}x{height}+{x}+{y}")
            
            # –ß–µ–∫–∞—î–º–æ –ø–æ–∫–∏ –≤—ñ–∫–Ω–æ –±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ —ñ —Ü–µ–Ω—Ç—Ä—É—î–º–æ –π–æ–≥–æ
            result_window.update_idletasks()
            center_window(result_window, self.root)
            
            # –†–æ–±–∏–º–æ –≤—ñ–∫–Ω–æ –º–æ–¥–∞–ª—å–Ω–∏–º
            result_window.transient(self.root)
            result_window.grab_set()
            result_window.focus_set()
            
            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Å—å–æ–≥–æ –≤–º—ñ—Å—Ç—É –∑ –≤—ñ–¥—Å—Ç—É–ø–∞–º–∏
            content_frame = tk.Frame(result_window, bg="#f0f8ff")
            content_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
            
            # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            tk.Label(content_frame, 
                    text="üéâ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!",
                    font=("Arial", 20, "bold"),
                    bg="#f0f8ff",
                    fg="#2c3e50").pack(pady=(0, 20))
                    
            stats_frame = tk.Frame(content_frame, bg="#f0f8ff")
            stats_frame.pack(fill=tk.X, pady=(0, 20))
            
            tk.Label(stats_frame,
                    text=f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∑ –ø–µ—Ä—à–æ–≥–æ —Ä–∞–∑—É: {len(self.training_data) - self.mistake_count}",
                    font=("Arial", 12),
                    bg="#f0f8ff",
                    fg="#27ae60").pack(pady=5)
                    
            tk.Label(stats_frame,
                    text=f"‚ùå –°–ª—ñ–≤ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏: {self.mistake_count}",
                    font=("Arial", 12),
                    bg="#f0f8ff",
                    fg="#c0392b").pack(pady=5)
                    
            tk.Label(stats_frame,
                    text=f"üìà –¢–æ—á–Ω—ñ—Å—Ç—å: {accuracy:.1f}%",
                    font=("Arial", 12),
                    bg="#f0f8ff",
                    fg="#2980b9").pack(pady=5)
            
            # –ö–Ω–æ–ø–∫–∏ –¥—ñ–π
            buttons_frame = tk.Frame(content_frame, bg="#f0f8ff")
            buttons_frame.pack(fill=tk.X, padx=20, pady=20)
            
            def restart_training():
                result_window.destroy()
                self.training_index = 0
                self.mistake_count = 0
                self.score = 0
                self.attempts_count = 0
                random.shuffle(self.training_data)  # –ü–µ—Ä–µ–º—ñ—à—É—î–º–æ —Å–ª–æ–≤–∞ –∑–Ω–æ–≤—É
                self.training_ui()
            
            def return_to_menu():
                result_window.destroy()
                self.create_main_menu()
            
            # –ö–Ω–æ–ø–∫–∞ "–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑"
            retry_btn = tk.Button(buttons_frame,
                                text="üîÑ –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑",
                                font=("Arial", 12),
                                bg="#3498db",
                                fg="white",
                                relief=tk.FLAT,
                                command=restart_training)
            retry_btn.pack(fill=tk.X, pady=5)
            
            # –ö–Ω–æ–ø–∫–∞ "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é"
            menu_btn = tk.Button(buttons_frame,
                               text="üè† –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é",
                               font=("Arial", 12),
                               bg="#95a5a6",
                               fg="white",
                               relief=tk.FLAT,
                               command=return_to_menu)
            menu_btn.pack(fill=tk.X, pady=5)
            
            # –•–æ–≤–µ—Ä-–µ—Ñ–µ–∫—Ç–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
            for btn, color in [(retry_btn, "#3498db"), (menu_btn, "#95a5a6")]:
                btn.bind("<Enter>", lambda e, btn=btn, color=color: 
                        btn.configure(bg=self.darken_color(color)))
                btn.bind("<Leave>", lambda e, btn=btn, color=color: 
                        btn.configure(bg=color))
            
            return
            
        # –ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è...
        # –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = tk.Frame(self.root, bg="#f0f8ff")
        main_container.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # –ü—Ä–æ–≥—Ä–µ—Å
        progress_frame = tk.Frame(main_container, bg="#f0f8ff")
        progress_frame.pack(fill=tk.X, pady=(0, 20))
        
        progress = f"–°–ª–æ–≤–æ {self.training_index + 1} –∑ {len(self.training_data)}"
        tk.Label(progress_frame, text=progress, 
                font=("Arial", 12), bg="#f0f8ff", fg="#7f8c8d").pack()
        
        # –ü—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä
        progress_value = (self.training_index + 1) / len(self.training_data) * 100
        progress_bar = ttk.Progressbar(progress_frame, length=300, mode='determinate')
        progress_bar.pack(pady=5)
        progress_bar['value'] = progress_value
        
        word = self.training_data[self.training_index]
        self.current_word = word
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Å–ª–æ–≤–æ –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É
        if self.training_mode == "EN-UA":
            question = word["english"]
            self.correct_answer = word["ukrainian"]
            flag_from, flag_to = "üá¨üáß", "üá∫üá¶"
        else:
            question = word["ukrainian"]
            self.correct_answer = word["english"]
            flag_from, flag_to = "üá∫üá¶", "üá¨üáß"
        
        # –£—Ä–æ–∫
        lesson_name = word.get("lesson", "–ì–æ–ª–æ–≤–Ω–∏–π")
        if lesson_name != "–ì–æ–ª–æ–≤–Ω–∏–π":
            tk.Label(main_container, text=f"üìö –£—Ä–æ–∫: {lesson_name}",
                    font=("Arial", 10), bg="#f0f8ff", fg="#7f8c8d").pack()
        
        # –ù–∞–ø—Ä—è–º–æ–∫ –ø–µ—Ä–µ–∫–ª–∞–¥—É
        tk.Label(main_container, text=f"{flag_from} ‚û°Ô∏è {flag_to}",
                font=("Arial", 14), bg="#f0f8ff").pack(pady=5)
        
        # –°–ª–æ–≤–æ –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É
        tk.Label(main_container, text=question,
                font=("Arial", 24, "bold"), bg="#f0f8ff", fg="#2c3e50").pack(pady=20)
        
        # –ü—ñ–¥–∫–∞–∑–∫–∞ (—è–∫—â–æ —î —Å–ø—Ä–æ–±–∏)
        if self.attempts_count > 1:
            hint = self.correct_answer[:min(self.attempts_count-1, len(self.correct_answer))]
            tk.Label(main_container, text=f"üí° –ü—ñ–¥–∫–∞–∑–∫–∞: {hint}...",
                    font=("Arial", 12), bg="#f0f8ff", fg="#e67e22").pack(pady=5)
        
        # –ü–æ–ª–µ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è
        answer_frame = tk.Frame(main_container, bg="#f0f8ff")
        answer_frame.pack(fill=tk.X, pady=10)
        
        answer_entry = tk.Entry(answer_frame, 
                              font=("Arial", 14),
                              width=30,
                              justify='center')
        answer_entry.pack()
        answer_entry.focus()
        
        def check_answer(event=None):
            user_answer = answer_entry.get().strip().lower()
            correct = self.correct_answer.lower()
            
            if user_answer == correct:
                if self.attempts_count == 0:  # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∑ –ø–µ—Ä—à–æ–≥–æ —Ä–∞–∑—É
                    self.score += 1
                else:  # –ü—Ä–∞–≤–∏–ª—å–Ω–æ, –∞–ª–µ –Ω–µ –∑ –ø–µ—Ä—à–æ–≥–æ —Ä–∞–∑—É
                    self.mistake_count += 1
                    
                messagebox.showinfo("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!", "–ú–æ–ª–æ–¥–µ—Ü—å! üëç")
                self.training_index += 1
                self.attempts_count = 0  # –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ —Å–ø—Ä–æ–±
                self.training_ui()
            else:
                self.attempts_count += 1  # –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ —Å–ø—Ä–æ–±
                messagebox.showwarning("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!", "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!")
                self.training_ui()
        
        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        check_btn = tk.Button(main_container, text="–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ ‚úì",
                            font=("Arial", 12),
                            bg="#3498db",
                            fg="white",
                            relief=tk.FLAT,
                            width=15,
                            command=check_answer)
        check_btn.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–∏—Ö–æ–¥—É
        exit_btn = tk.Button(main_container, text="üö™ –í–∏–π—Ç–∏",
                           font=("Arial", 12),
                           bg="#e74c3c",
                           fg="white",
                           relief=tk.FLAT,
                           width=15,
                           command=self.create_main_menu)
        exit_btn.pack(pady=5)
        
        # –•–æ–≤–µ—Ä-–µ—Ñ–µ–∫—Ç–∏
        check_btn.bind("<Enter>", lambda e: check_btn.configure(bg=self.darken_color("#3498db")))
        check_btn.bind("<Leave>", lambda e: check_btn.configure(bg="#3498db"))
        exit_btn.bind("<Enter>", lambda e: exit_btn.configure(bg=self.darken_color("#e74c3c")))
        exit_btn.bind("<Leave>", lambda e: exit_btn.configure(bg="#e74c3c"))
        
        # –ü—Ä–∏–≤'—è–∑—É—î–º–æ Enter –¥–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        self.root.bind("<Return>", check_answer)

    def add_word_ui(self):
        """–Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞."""
        self.clear_window()
        
        # –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = tk.Frame(self.root, bg="#f0f8ff")
        main_container.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        tk.Label(main_container, text="‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ —Å–ª–æ–≤–æ", 
                font=("Arial", 24, "bold"), bg="#f0f8ff", fg="#2c3e50").pack(pady=20)
        
        # –í–∏–±—ñ—Ä —É—Ä–æ–∫—É
        tk.Label(main_container, text="–£—Ä–æ–∫:", 
                font=("Arial", 14), bg="#f0f8ff", fg="#34495e").pack(pady=(0, 5))
        
        lessons = [lesson["name"] for lesson in get_lessons()]
        
        # –Ø–∫—â–æ —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π, —Å—Ç–≤–æ—Ä—é—î–º–æ —É—Ä–æ–∫ "–ì–æ–ª–æ–≤–Ω–∏–π"
        if not lessons:
            print("UI: –°–ø–∏—Å–æ–∫ —É—Ä–æ–∫—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π. –°—Ç–≤–æ—Ä—é—î–º–æ —É—Ä–æ–∫ '–ì–æ–ª–æ–≤–Ω–∏–π'")
            create_lesson("–ì–æ–ª–æ–≤–Ω–∏–π")
            lessons = [lesson["name"] for lesson in get_lessons()]
            if not lessons:  # –Ø–∫—â–æ –≤—Å–µ —â–µ –Ω–µ–º–∞—î —É—Ä–æ–∫—ñ–≤, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–º—ñ–Ω–Ω–∏–∫
                lessons = ["–ì–æ–ª–æ–≤–Ω–∏–π"]
        
        self.lesson_var = tk.StringVar(value=lessons[0])
        
        lesson_dropdown = ttk.Combobox(main_container, textvariable=self.lesson_var, 
                                      values=lessons, state="readonly", 
                                      width=30, font=("Arial", 12))
        lesson_dropdown.pack(pady=(0, 20))
        
        # –ü–æ–ª–µ –¥–ª—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ–≥–æ —Å–ª–æ–≤–∞
        tk.Label(main_container, text="üá¨üáß –ê–Ω–≥–ª—ñ–π—Å—å–∫–µ —Å–ª–æ–≤–æ:", 
                font=("Arial", 14), bg="#f0f8ff", fg="#34495e").pack(pady=(0, 5))
        
        english_entry = tk.Entry(main_container, 
                               font=("Arial", 14),
                               width=30,
                               justify='center')
        english_entry.pack(pady=(0, 20))
        
        # –ü–æ–ª–µ –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª–∞–¥—É
        tk.Label(main_container, text="üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥:", 
                font=("Arial", 14), bg="#f0f8ff", fg="#34495e").pack(pady=(0, 5))
        
        ukrainian_entry = tk.Entry(main_container, 
                                 font=("Arial", 14),
                                 width=30,
                                 justify='center')
        ukrainian_entry.pack(pady=(0, 20))
        
        def save_new_word():
            english = english_entry.get().strip()
            ukrainian = ukrainian_entry.get().strip()
            lesson = self.lesson_var.get()
            
            if not english or not ukrainian:
                messagebox.showwarning("–ü–æ–º–∏–ª–∫–∞", "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –æ–±–∏–¥–≤–∞ –ø–æ–ª—è!")
                return
                
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤–µ —Å–ª–æ–≤–æ
            print(f"UI: –°–ø—Ä–æ–±–∞ –∑–±–µ—Ä–µ–≥—Ç–∏ —Å–ª–æ–≤–æ: {english} - {ukrainian} –≤ —É—Ä–æ–∫ {lesson}")
            result = save_word(english, ukrainian, lesson)
            print(f"UI: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–ª–æ–≤–∞: {result}")
            
            if result:
                # –û—á–∏—â–∞—î–º–æ –ø–æ–ª—è
                english_entry.delete(0, tk.END)
                ukrainian_entry.delete(0, tk.END)
                
                messagebox.showinfo("–£—Å–ø—ñ—Ö", "‚úÖ –°–ª–æ–≤–æ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")
            else:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Å–ª–æ–≤–æ! –ú–æ–∂–ª–∏–≤–æ, —Ç–∞–∫–µ —Å–ª–æ–≤–æ –≤–∂–µ —ñ—Å–Ω—É—î –∞–±–æ —î –ø—Ä–æ–±–ª–µ–º–∞ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö.")
            
        # –ö–Ω–æ–ø–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        save_btn = tk.Button(main_container, text="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏",
                           font=("Arial", 12),
                           bg="#2ecc71",
                           fg="white",
                           relief=tk.FLAT,
                           width=15,
                           command=save_new_word)
        save_btn.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫—É
        def create_new_lesson():
            lesson_name = simpledialog.askstring("–ù–æ–≤–∏–π —É—Ä–æ–∫", "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫—É:")
            if lesson_name:
                print(f"UI: –°–ø—Ä–æ–±–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —É—Ä–æ–∫: {lesson_name}")
                result = create_lesson(lesson_name)
                print(f"UI: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —É—Ä–æ–∫—É: {result}")
                
                if result:
                    # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫—ñ–≤
                    lessons = [lesson["name"] for lesson in get_lessons()]
                    lesson_dropdown['values'] = lessons
                    self.lesson_var.set(lesson_name)
                    messagebox.showinfo("–£—Å–ø—ñ—Ö", "‚úÖ –£—Ä–æ–∫ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
                else:
                    messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —É—Ä–æ–∫! –ú–æ–∂–ª–∏–≤–æ, —É—Ä–æ–∫ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î –∞–±–æ —î –ø—Ä–æ–±–ª–µ–º–∞ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö.")
        
        new_lesson_btn = tk.Button(main_container, text="üìö –°—Ç–≤–æ—Ä–∏—Ç–∏ —É—Ä–æ–∫",
                                font=("Arial", 12),
                                bg="#3498db",
                                fg="white",
                                relief=tk.FLAT,
                                width=15,
                                command=create_new_lesson)
        new_lesson_btn.pack(pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        back_btn = tk.Button(main_container, text="üîô –ù–∞–∑–∞–¥",
                           font=("Arial", 12),
                           bg="#e74c3c",
                           fg="white",
                           relief=tk.FLAT,
                           width=15,
                           command=self.create_main_menu)
        back_btn.pack(pady=5)
        
        # –•–æ–≤–µ—Ä-–µ—Ñ–µ–∫—Ç–∏
        for btn, color in [(save_btn, "#2ecc71"), 
                          (new_lesson_btn, "#3498db"), 
                          (back_btn, "#e74c3c")]:
            btn.bind("<Enter>", lambda e, btn=btn, color=color: 
                    btn.configure(bg=self.darken_color(color)))
            btn.bind("<Leave>", lambda e, btn=btn, color=color: 
                    btn.configure(bg=color))
        
        # –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä—à–µ –ø–æ–ª–µ
        english_entry.focus()

    def show_dictionary(self):
        """–ü–æ–∫–∞–∑—É—î —Å–ª–æ–≤–Ω–∏–∫ –∑ —É—Å—ñ–º–∞ –Ω–µ–≤–∏–≤—á–µ–Ω–∏–º–∏ —Å–ª–æ–≤–∞–º–∏."""
        self.clear_window()
        
        # –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = tk.Frame(self.root, bg="#f0f8ff")
        main_container.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        tk.Label(main_container, text="üìñ –°–ª–æ–≤–Ω–∏–∫", 
                font=("Arial", 24, "bold"), bg="#f0f8ff", fg="#2c3e50").pack(pady=20)

        # –§—Ä–µ–π–º –¥–ª—è –≤–∏–±–æ—Ä—É —É—Ä–æ–∫—É
        lesson_frame = tk.Frame(main_container, bg="#f0f8ff")
        lesson_frame.pack(fill=tk.X, pady=(0, 10))
        
        # –ú—ñ—Ç–∫–∞ –¥–ª—è —É—Ä–æ–∫—É
        tk.Label(lesson_frame, text="–£—Ä–æ–∫:", 
                font=("Arial", 12), bg="#f0f8ff", fg="#34495e").pack(side=tk.LEFT, padx=5)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫—ñ–≤
        lessons = ["–í—Å—ñ —É—Ä–æ–∫–∏"] + [lesson["name"] for lesson in get_lessons()]
        lesson_var = tk.StringVar(value="–ì–æ–ª–æ–≤–Ω–∏–π")
        
        # –ö–æ–º–±–æ–±–æ–∫—Å –¥–ª—è –≤–∏–±–æ—Ä—É —É—Ä–æ–∫—É
        lesson_combo = ttk.Combobox(lesson_frame, 
                                  textvariable=lesson_var,
                                  values=lessons,
                                  state="readonly",
                                  font=("Arial", 12),
                                  width=20)
        lesson_combo.pack(side=tk.LEFT, padx=5)

        def rename_current_lesson():
            current_lesson = lesson_var.get()
            if current_lesson == "–í—Å—ñ —É—Ä–æ–∫–∏":
                messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —É—Ä–æ–∫ –¥–ª—è –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è!")
                return
                
            new_name = simpledialog.askstring("–ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è —É—Ä–æ–∫—É", 
                                            f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É –¥–ª—è —É—Ä–æ–∫—É '{current_lesson}':",
                                            initialvalue=current_lesson)
            
            if new_name and new_name != current_lesson:
                if rename_lesson(current_lesson, new_name):
                    # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫—ñ–≤
                    lessons = ["–í—Å—ñ —É—Ä–æ–∫–∏"] + [lesson["name"] for lesson in get_lessons()]
                    lesson_combo['values'] = lessons
                    lesson_var.set(new_name)
                    # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —Å–ª—ñ–≤
                    update_words_list()
                    messagebox.showinfo("–£—Å–ø—ñ—Ö", "‚úÖ –£—Ä–æ–∫ —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤–∞–Ω–æ!")
                else:
                    messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏ —É—Ä–æ–∫!")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è —É—Ä–æ–∫—É
        rename_btn = tk.Button(lesson_frame,
                             text="üìù",
                             font=("Arial", 12),
                             bg="#f39c12",
                             fg="white",
                             relief=tk.FLAT,
                             command=rename_current_lesson)
        rename_btn.pack(side=tk.LEFT, padx=5)
        
        # –•–æ–≤–µ—Ä-–µ—Ñ–µ–∫—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è
        rename_btn.bind("<Enter>", lambda e: rename_btn.configure(bg=self.darken_color("#f39c12")))
        rename_btn.bind("<Leave>", lambda e: rename_btn.configure(bg="#f39c12"))
        
        def filter_words(event=None):
            """–§—ñ–ª—å—Ç—Ä—É—î —Å–ª–æ–≤–∞ –∑–∞ –≤–∏–±—Ä–∞–Ω–∏–º —É—Ä–æ–∫–æ–º."""
            selected_lesson = lesson_var.get()
            if selected_lesson == "–í—Å—ñ —É—Ä–æ–∫–∏":
                selected_lesson = None
            update_words_list(lesson_name=selected_lesson)
        
        lesson_combo.bind('<<ComboboxSelected>>', filter_words)
        
        # –§—Ä–µ–π–º –¥–ª—è —Å–ø–∏—Å–∫—É —Å–ª—ñ–≤
        words_frame = tk.Frame(main_container, bg="#f0f8ff")
        words_frame.pack(fill=tk.BOTH, expand=True, padx=10)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–∫—Ä–æ–ª–ª–±–∞—Ä
        scrollbar = ttk.Scrollbar(words_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫
        words_list = tk.Listbox(words_frame, 
                      font=("Consolas", 14),
                      bg="white",
                      selectmode=tk.SINGLE,
                      height=15,
                      width=40,
                      selectbackground="#e0e0e0",
                      selectforeground="#00d303",
                      activestyle="none",
                      highlightthickness=0,
                      yscrollcommand=scrollbar.set)
        words_list.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        scrollbar.config(command=words_list.yview)

        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–ª–∞–≤—ñ—à –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ —Å—Ç—Ä—ñ–ª–æ–∫
        def on_key_press(event):
            if event.keysym == 'Up' or event.keysym == 'Down':
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –≤–∏–±—ñ—Ä
                selection = words_list.curselection()
                if selection:
                    index = selection[0]
                    if event.keysym == 'Up' and index > 0:
                            words_list.selection_clear(0, tk.END)
                            words_list.selection_set(index - 1)
                            words_list.see(index - 1)
                            words_list.event_generate('<<ListboxSelect>>')
                    elif event.keysym == 'Down' and index < words_list.size() - 1:
                            words_list.selection_clear(0, tk.END)
                            words_list.selection_set(index + 1)
                            words_list.see(index + 1)
                            words_list.event_generate('<<ListboxSelect>>')
                return 'break'  # –ó–∞–±–æ—Ä–æ–Ω—è—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É –æ–±—Ä–æ–±–∫—É

            # –ü—Ä–∏–≤'—è–∑—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ–π –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
        words_list.bind('<KeyPress>', on_key_press)
        
        def update_words_list(select_index=None, lesson_name=None):
            """–û–Ω–æ–≤–ª—é—î —Å–ø–∏—Å–æ–∫ –Ω–µ–≤–∏–≤—á–µ–Ω–∏—Ö —Å–ª—ñ–≤."""
            words_list.delete(0, tk.END)
            words = load_words(lesson_name, show_learned=False)  # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–µ–≤–∏–≤—á–µ–Ω—ñ —Å–ª–æ–≤–∞
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–¥–æ–≤—à–µ –∞–Ω–≥–ª—ñ–π—Å—å–∫–µ —Å–ª–æ–≤–æ –¥–ª—è –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è
            max_eng_len = max(len(word) for word in words.keys()) if words else 0
            fixed_width = max_eng_len + 10  # –î–æ–¥–∞—î–º–æ –≤—ñ–¥—Å—Ç—É–ø –ø—ñ—Å–ª—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ–≥–æ —Å–ª–æ–≤–∞
            
            # –°–æ—Ä—Ç—É—î–º–æ —Å–ª–æ–≤–∞ –∑–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏–º –∞–ª—Ñ–∞–≤—ñ—Ç–æ–º
            sorted_words = sorted(words.items(), key=lambda x: x[0].lower())
            
            for en_word, details in sorted_words:
                ua_word = details["translation"]
                words_list.insert(tk.END, f"‚ùå {en_word:<{fixed_width}}{ua_word}")
            if select_index is not None and select_index < words_list.size():
                words_list.selection_set(select_index)
                create_word_buttons(select_index)
        
        # –ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ª—ñ–≤ –¥–ª—è —É—Ä–æ–∫—É "–ì–æ–ª–æ–≤–Ω–∏–π"
        update_words_list(lesson_name="–ì–æ–ª–æ–≤–Ω–∏–π")
        
        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥—ñ–π –∑—ñ —Å–ª–æ–≤–∞–º–∏
        word_actions_frame = tk.Frame(main_container, bg="#f0f8ff")
        word_actions_frame.pack(fill=tk.X, pady=10)
        
        def create_word_buttons(index):
            """–°—Ç–≤–æ—Ä—é—î –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Å–ª–æ–≤–∞."""
            for widget in word_actions_frame.winfo_children():
                widget.destroy()
                
            if not (0 <= index < words_list.size()):
                return
                
            item = words_list.get(index)
            # –û—Ç—Ä–∏–º—É—î–º–æ –∞–Ω–≥–ª—ñ–π—Å—å–∫–µ —Å–ª–æ–≤–æ (–º—ñ–∂ —Å—Ç–∞—Ç—É—Å–æ–º —ñ –ø–µ—Ä–µ–∫–ª–∞–¥–æ–º)
            # –§–æ—Ä–º–∞—Ç —Ä—è–¥–∫–∞: "‚ùå {en_word:<{fixed_width}}{ua_word}"
            # –í–∏–¥–∞–ª—è—î–º–æ —Å–∏–º–≤–æ–ª —Å—Ç–∞—Ç—É—Å—É —ñ –ø—Ä–æ–±—ñ–ª
            cleaned_item = item[2:].strip()
            # –†–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫–µ —Å–ª–æ–≤–æ —Ç–∞ –ø–µ—Ä–µ–∫–ª–∞–¥ (–∞–Ω–≥–ª—ñ–π—Å—å–∫–µ —Å–ª–æ–≤–æ –º–∞—î —Ñ—ñ–∫—Å–æ–≤–∞–Ω—É —à–∏—Ä–∏–Ω—É –∑ –ø—Ä–æ–±—ñ–ª–∞–º–∏)
            en_word = cleaned_item.strip().split()[0]
            
            def toggle_learned_state():
                if toggle_word_learned(en_word):
                    # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —Å–ª—ñ–≤, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –ø–æ—Ç–æ—á–Ω–∏–π —É—Ä–æ–∫
                    current_lesson = lesson_var.get()
                    if current_lesson == "–í—Å—ñ —É—Ä–æ–∫–∏":
                        current_lesson = None
                    update_words_list(lesson_name=current_lesson)
                else:
                    messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å —Å–ª–æ–≤–∞!")
            
            # –ö–Ω–æ–ø–∫–∞ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è —Å–ª–æ–≤–∞ —è–∫ –≤–∏–≤—á–µ–Ω–æ–≥–æ
            learn_btn = tk.Button(word_actions_frame,
                                text="‚úÖ –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –≤–∏–≤—á–µ–Ω–µ",
                                font=("Arial", 12),
                                bg="#2ecc71",
                                fg="white",
                                relief=tk.FLAT,
                                command=toggle_learned_state)
            learn_btn.pack(side=tk.LEFT, padx=5, expand=True)
            
            # –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
            edit_btn = tk.Button(word_actions_frame,
                               text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏",
                               font=("Arial", 12),
                               bg="#3498db",
                               fg="white",
                               relief=tk.FLAT,
                               command=lambda: edit_word(en_word, index))
            edit_btn.pack(side=tk.LEFT, padx=5, expand=True)
            
            # –ö–Ω–æ–ø–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
            delete_btn = tk.Button(word_actions_frame,
                                text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏",
                                font=("Arial", 12),
                                bg="#e74c3c",
                                fg="white",
                                relief=tk.FLAT,
                                command=lambda: delete_word(en_word, index))
            delete_btn.pack(side=tk.LEFT, padx=5, expand=True)
            
            # –•–æ–≤–µ—Ä-–µ—Ñ–µ–∫—Ç–∏
            for btn, color in [(learn_btn, "#2ecc71"), (edit_btn, "#3498db"), (delete_btn, "#e74c3c")]:
                btn.bind("<Enter>", lambda e, btn=btn, color=color: 
                        btn.configure(bg=self.darken_color(color)))
                btn.bind("<Leave>", lambda e, btn=btn, color=color: 
                        btn.configure(bg=color))
        
        def on_select(event):
            selection = words_list.curselection()
            if selection:
                create_word_buttons(selection[0])
        
        words_list.bind('<<ListboxSelect>>', on_select)
        
        def edit_word(en_word, index):
            """–†–µ–¥–∞–≥—É—î –≤–∏–±—Ä–∞–Ω–µ —Å–ª–æ–≤–æ."""
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—ñ —Å–ª–æ–≤–∞
            words = load_words()
            if en_word not in words:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–°–ª–æ–≤–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
                return
                
            word_details = words[en_word]
            ua_word = word_details["translation"]
            current_lesson = word_details.get("lesson", "–ì–æ–ª–æ–≤–Ω–∏–π")
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –¥—ñ–∞–ª–æ–≥–æ–≤–µ –≤—ñ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
            edit_window = tk.Toplevel(self.root)
            edit_window.title("–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–ª–æ–≤–∞")
            edit_window.geometry("400x300")
            edit_window.configure(bg="#f0f8ff")
            edit_window.resizable(False, False)
            edit_window.transient(self.root)  # –†–æ–±–∏–º–æ –≤—ñ–∫–Ω–æ –º–æ–¥–∞–ª—å–Ω–∏–º
            edit_window.grab_set()  # –ë–ª–æ–∫—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ
            
            # –¶–µ–Ω—Ç—Ä—É—î–º–æ –≤—ñ–∫–Ω–æ
            def center_window(window, parent):
                parent_x = parent.winfo_x()
                parent_y = parent.winfo_y()
                parent_width = parent.winfo_width()
                parent_height = parent.winfo_height()
                
                width = window.winfo_width()
                height = window.winfo_height()
                
                x = parent_x + (parent_width - width) // 2
                y = parent_y + (parent_height - height) // 2
                
                window.geometry(f"+{x}+{y}")
            
            # –í–∏–∫–ª–∏–∫–∞—î–º–æ –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –≤—ñ–∫–Ω–æ –±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ
            edit_window.update_idletasks()
            center_window(edit_window, self.root)
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            tk.Label(edit_window, text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–ª–æ–≤–∞", 
                   font=("Arial", 16, "bold"), bg="#f0f8ff", fg="#2c3e50").pack(pady=10)
            
            # –§—Ä–µ–π–º –¥–ª—è –ø–æ–ª—ñ–≤ –≤–≤–æ–¥—É
            input_frame = tk.Frame(edit_window, bg="#f0f8ff")
            input_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
            
            # –ü–æ–ª–µ –¥–ª—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ–≥–æ —Å–ª–æ–≤–∞
            tk.Label(input_frame, text="üá¨üáß –ê–Ω–≥–ª—ñ–π—Å—å–∫–µ —Å–ª–æ–≤–æ:", 
                   font=("Arial", 12), bg="#f0f8ff", fg="#34495e").pack(anchor=tk.W, pady=(0, 5))
            
            english_entry = tk.Entry(input_frame, 
                                  font=("Arial", 12),
                                  width=30,
                                  justify='left')
            english_entry.pack(fill=tk.X, pady=(0, 10))
            english_entry.insert(0, en_word)  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
            
            # –ü–æ–ª–µ –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª–∞–¥—É
            tk.Label(input_frame, text="üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥:", 
                   font=("Arial", 12), bg="#f0f8ff", fg="#34495e").pack(anchor=tk.W, pady=(0, 5))
            
            ukrainian_entry = tk.Entry(input_frame, 
                                    font=("Arial", 12),
                                    width=30,
                                    justify='left')
            ukrainian_entry.pack(fill=tk.X, pady=(0, 10))
            ukrainian_entry.insert(0, ua_word)  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
            
            # –í–∏–±—ñ—Ä —É—Ä–æ–∫—É
            tk.Label(input_frame, text="–£—Ä–æ–∫:", 
                   font=("Arial", 12), bg="#f0f8ff", fg="#34495e").pack(anchor=tk.W, pady=(0, 5))
            
            lessons = [lesson["name"] for lesson in get_lessons()]
            lesson_var = tk.StringVar(value=current_lesson)
            
            lesson_dropdown = ttk.Combobox(input_frame, textvariable=lesson_var, 
                                       values=lessons, state="readonly", 
                                       width=30, font=("Arial", 12))
            lesson_dropdown.pack(fill=tk.X, pady=(0, 10))
            
            # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
            button_frame = tk.Frame(edit_window, bg="#f0f8ff")
            button_frame.pack(fill=tk.X, pady=10, padx=20)
            
            # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–º—ñ–Ω
            def save_changes():
                new_english = english_entry.get().strip()
                new_ukrainian = ukrainian_entry.get().strip()
                new_lesson = lesson_var.get()
                
                if not new_english or not new_ukrainian:
                    messagebox.showwarning("–ü–æ–º–∏–ª–∫–∞", "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –æ–±–∏–¥–≤–∞ –ø–æ–ª—è!")
                    return
                
                # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ª–æ–≤–∞
                from db import update_word
                
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ª–æ–≤–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
                if update_word(en_word, new_english, new_ukrainian, new_lesson):
                    messagebox.showinfo("–£—Å–ø—ñ—Ö", "‚úÖ –°–ª–æ–≤–æ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!")
                    edit_window.destroy()
                    
                    # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —Å–ª—ñ–≤
                    current_lesson_filter = lesson_var.get()
                    if current_lesson_filter == "–í—Å—ñ —É—Ä–æ–∫–∏":
                        current_lesson_filter = None
                    update_words_list(lesson_name=current_lesson_filter)
                else:
                    messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å–ª–æ–≤–æ! –ú–æ–∂–ª–∏–≤–æ, —Å–ª–æ–≤–æ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î.")
            
            # –ö–Ω–æ–ø–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
            save_btn = tk.Button(button_frame, text="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏",
                              font=("Arial", 12),
                              bg="#2ecc71",
                              fg="white",
                              relief=tk.FLAT,
                              width=10,
                              command=save_changes)
            save_btn.pack(side=tk.LEFT, padx=5, expand=True)
            
            # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
            cancel_btn = tk.Button(button_frame, text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏",
                                font=("Arial", 12),
                                bg="#e74c3c",
                                fg="white",
                                relief=tk.FLAT,
                                width=10,
                                command=edit_window.destroy)
            cancel_btn.pack(side=tk.LEFT, padx=5, expand=True)
            
            # –•–æ–≤–µ—Ä-–µ—Ñ–µ–∫—Ç–∏
            for btn, color in [(save_btn, "#2ecc71"), (cancel_btn, "#e74c3c")]:
                btn.bind("<Enter>", lambda e, btn=btn, color=color: 
                        btn.configure(bg=self.darken_color(color)))
                btn.bind("<Leave>", lambda e, btn=btn, color=color: 
                        btn.configure(bg=color))
            
            # –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä—à–µ –ø–æ–ª–µ
            english_entry.focus()
        
        def delete_word(en_word, index):
            if messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–ª–æ–≤–æ '{en_word}'?"):
                words = load_words()
                if en_word in words:
                    del words[en_word]
                    from db import save_words
                    save_words(words)
                    update_words_list()
                    # –û—á–∏—â–∞—î–º–æ —Ñ—Ä–µ–π–º –∑ –∫–Ω–æ–ø–∫–∞–º–∏
                    for widget in word_actions_frame.winfo_children():
                        widget.destroy()
                    messagebox.showinfo("–£—Å–ø—ñ—Ö", "‚úÖ –°–ª–æ–≤–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!")
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        back_btn = tk.Button(main_container, 
                           text="üîô –ù–∞–∑–∞–¥",
                           font=("Arial", 12),
                           bg="#95a5a6",
                           fg="white",
                           relief=tk.FLAT,
                           command=self.create_main_menu)
        back_btn.pack(pady=10)
        
        # –•–æ–≤–µ—Ä-–µ—Ñ–µ–∫—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        back_btn.bind("<Enter>", lambda e: back_btn.configure(bg=self.darken_color("#95a5a6")))
        back_btn.bind("<Leave>", lambda e: back_btn.configure(bg="#95a5a6"))

    def show_learned_words(self):
        """–ü–æ–∫–∞–∑—É—î –≤–∏–≤—á–µ–Ω—ñ —Å–ª–æ–≤–∞."""
        self.clear_window()
        
        # –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = tk.Frame(self.root, bg="#f0f8ff")
        main_container.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        tk.Label(main_container, text="üìö –í–∏–≤—á–µ–Ω—ñ —Å–ª–æ–≤–∞", 
                font=("Arial", 24, "bold"), bg="#f0f8ff", fg="#2c3e50").pack(pady=20)

        # –§—Ä–µ–π–º –¥–ª—è –≤–∏–±–æ—Ä—É —É—Ä–æ–∫—É
        lesson_frame = tk.Frame(main_container, bg="#f0f8ff")
        lesson_frame.pack(fill=tk.X, pady=(0, 10))
        
        # –ú—ñ—Ç–∫–∞ –¥–ª—è —É—Ä–æ–∫—É
        tk.Label(lesson_frame, text="–£—Ä–æ–∫:", 
                font=("Arial", 12), bg="#f0f8ff", fg="#34495e").pack(side=tk.LEFT, padx=5)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫—ñ–≤
        lessons = ["–í—Å—ñ —É—Ä–æ–∫–∏"] + [lesson["name"] for lesson in get_lessons()]
        lesson_var = tk.StringVar(value="–ì–æ–ª–æ–≤–Ω–∏–π")  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ "–ì–æ–ª–æ–≤–Ω–∏–π" –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        
        # –ö–æ–º–±–æ–±–æ–∫—Å –¥–ª—è –≤–∏–±–æ—Ä—É —É—Ä–æ–∫—É
        lesson_combo = ttk.Combobox(lesson_frame, 
                                  textvariable=lesson_var,
                                  values=lessons,
                                  state="readonly",
                                  font=("Arial", 12),
                                  width=20)
        lesson_combo.pack(side=tk.LEFT, padx=5)
        
        # –§—Ä–µ–π–º –¥–ª—è —Å–ø–∏—Å–∫—É —Å–ª—ñ–≤
        words_frame = tk.Frame(main_container, bg="#f0f8ff")
        words_frame.pack(fill=tk.BOTH, expand=True, padx=10)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–∫—Ä–æ–ª–ª–±–∞—Ä
        scrollbar = ttk.Scrollbar(words_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫
        words_list = tk.Listbox(words_frame, 
                              font=("Arial", 12),
                              bg="white",
                              selectmode=tk.SINGLE,
                              height=15,
                              width=40,
                              yscrollcommand=scrollbar.set)
        words_list.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        scrollbar.config(command=words_list.yview)
        
        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥—ñ–π –∑—ñ —Å–ª–æ–≤–∞–º–∏
        word_actions_frame = tk.Frame(main_container, bg="#f0f8ff")
        word_actions_frame.pack(fill=tk.X, pady=10)
        
        def create_word_buttons(index):
            """–°—Ç–≤–æ—Ä—é—î –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Å–ª–æ–≤–∞."""
            for widget in word_actions_frame.winfo_children():
                widget.destroy()
                
            if not (0 <= index < words_list.size()):
                return
                
            item = words_list.get(index)
            # –û—Ç—Ä–∏–º—É—î–º–æ –∞–Ω–≥–ª—ñ–π—Å—å–∫–µ —Å–ª–æ–≤–æ (–º—ñ–∂ —Å—Ç–∞—Ç—É—Å–æ–º —ñ –ø–µ—Ä–µ–∫–ª–∞–¥–æ–º)
            # –§–æ—Ä–º–∞—Ç —Ä—è–¥–∫–∞: "‚ùå {en_word:<{fixed_width}}{ua_word}"
            # –í–∏–¥–∞–ª—è—î–º–æ —Å–∏–º–≤–æ–ª —Å—Ç–∞—Ç—É—Å—É —ñ –ø—Ä–æ–±—ñ–ª
            cleaned_item = item[2:].strip()
            # –†–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫–µ —Å–ª–æ–≤–æ —Ç–∞ –ø–µ—Ä–µ–∫–ª–∞–¥ (–∞–Ω–≥–ª—ñ–π—Å—å–∫–µ —Å–ª–æ–≤–æ –º–∞—î —Ñ—ñ–∫—Å–æ–≤–∞–Ω—É —à–∏—Ä–∏–Ω—É –∑ –ø—Ä–æ–±—ñ–ª–∞–º–∏)
            en_word = cleaned_item.strip().split()[0]
            
            def toggle_learned_state():
                if toggle_word_learned(en_word):
                    messagebox.showinfo("–£—Å–ø—ñ—Ö", "‚úÖ –°–ª–æ–≤–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–æ –≤ —Å–ª–æ–≤–Ω–∏–∫!")
                    # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —Å–ª—ñ–≤, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –ø–æ—Ç–æ—á–Ω–∏–π —É—Ä–æ–∫
                    current_lesson = lesson_var.get()
                    if current_lesson == "–í—Å—ñ —É—Ä–æ–∫–∏":
                        current_lesson = None
                    update_learned_words_list(lesson_name=current_lesson)
                else:
                    messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å —Å–ª–æ–≤–∞!")
            
            # –ö–Ω–æ–ø–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–Ω–∏–∫
            unlearn_btn = tk.Button(word_actions_frame,
                                text="‚ùå –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –≤ —Å–ª–æ–≤–Ω–∏–∫",
                                font=("Arial", 12),
                                bg="#e74c3c",
                                fg="white",
                                relief=tk.FLAT,
                                command=toggle_learned_state)
            unlearn_btn.pack(side=tk.LEFT, padx=5, expand=True)
            
            # –•–æ–≤–µ—Ä-–µ—Ñ–µ–∫—Ç
            unlearn_btn.bind("<Enter>", lambda e: unlearn_btn.configure(bg=self.darken_color("#e74c3c")))
            unlearn_btn.bind("<Leave>", lambda e: unlearn_btn.configure(bg="#e74c3c"))
        
        def on_select(event):
            selection = words_list.curselection()
            if selection:
                create_word_buttons(selection[0])
        
        words_list.bind('<<ListboxSelect>>', on_select)
        
        def update_learned_words_list(lesson_name=None):
            """–û–Ω–æ–≤–ª—é—î —Å–ø–∏—Å–æ–∫ –≤–∏–≤—á–µ–Ω–∏—Ö —Å–ª—ñ–≤."""
            words_list.delete(0, tk.END)
            words = load_words(lesson_name, show_learned=True)
            
            # –°–æ—Ä—Ç—É—î–º–æ —Å–ª–æ–≤–∞ –∑–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏–º –∞–ª—Ñ–∞–≤—ñ—Ç–æ–º
            sorted_words = sorted(words.items(), key=lambda x: x[0].lower())
            
            for en_word, details in sorted_words:
                ua_word = details["translation"]
                words_list.insert(tk.END, f"‚úÖ {en_word} - {ua_word}")
            # –û—á–∏—â–∞—î–º–æ —Ñ—Ä–µ–π–º –∑ –∫–Ω–æ–ø–∫–∞–º–∏
            for widget in word_actions_frame.winfo_children():
                widget.destroy()
        
        def filter_words(event=None):
            """–§—ñ–ª—å—Ç—Ä—É—î —Å–ª–æ–≤–∞ –∑–∞ –≤–∏–±—Ä–∞–Ω–∏–º —É—Ä–æ–∫–æ–º."""
            selected_lesson = lesson_var.get()
            if selected_lesson == "–í—Å—ñ —É—Ä–æ–∫–∏":
                selected_lesson = None
            update_learned_words_list(selected_lesson)
        
        lesson_combo.bind('<<ComboboxSelected>>', filter_words)
        
        # –ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∏–≤—á–µ–Ω–∏—Ö —Å–ª—ñ–≤ –¥–ª—è —É—Ä–æ–∫—É "–ì–æ–ª–æ–≤–Ω–∏–π"
        update_learned_words_list("–ì–æ–ª–æ–≤–Ω–∏–π")
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        back_btn = tk.Button(main_container, 
                           text="üîô –ù–∞–∑–∞–¥",
                           font=("Arial", 12),
                           bg="#95a5a6",
                           fg="white",
                           relief=tk.FLAT,
                           command=self.create_main_menu)
        back_btn.pack(pady=10)
        
        # –•–æ–≤–µ—Ä-–µ—Ñ–µ–∫—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        back_btn.bind("<Enter>", lambda e: back_btn.configure(bg=self.darken_color("#95a5a6")))
        back_btn.bind("<Leave>", lambda e: back_btn.configure(bg="#95a5a6"))

def run_ui():
    root = tk.Tk()
    app = WordTrainerApp(root)
    root.mainloop()     